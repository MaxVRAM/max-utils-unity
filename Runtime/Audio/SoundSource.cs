using UnityEngine;

namespace MaxVram.Audio
{
    /// <summary>
    /// Low-level sound source interface.
    /// </summary>
    public class SoundSource : IMakeSound
    {
        protected int OutputSampleRate { get; private set; }
        protected double SourceSampleCount { get; private set; }
        protected double PlaybackRatio { get; private set; }
        protected double Increment { get; set; }
        protected double CurrentIndex { get; set; }
        protected bool IsInitialised => OutputSampleRate != 0;

        protected SoundSource() { }

        /// <summary>
        /// Initialises the sound source with the given audio engine configuration and source sample count.
        /// </summary>
        /// <param name="config">Use <c>AudioSettings.GetConfiguration</c> to get Unity's current audio configuration.</param>
        /// <param name="sourceSampleCount">The number of samples in the source audio clip. Uses class-specific defaults if not provided.</param>
        public virtual void Initialise(AudioConfiguration config, double sourceSampleCount = 0)
        {
            OutputSampleRate = config.sampleRate;
            SourceSampleCount = sourceSampleCount;
            PlaybackRatio = SourceSampleCount / OutputSampleRate;
        }

        /// <summary>
        /// Sets the increment value used to calculate the next sample index, using the playback ratio to correctly scale the increment.
        /// </summary>
        protected virtual void SetIncrement() { }

        /// <summary>
        /// Increments the current sample index by the current increment value.
        /// </summary>
        protected virtual void IncrementSample() { }

        /// <summary>
        /// Increments the current read index pointing to the source sample array and returns the value at the new index.
        /// </summary>
        /// <returns>Sample at the new index.</returns>
        public virtual float GetNextSample()
        {
            return 0;
        }

        /// <summary>
        /// Returns the sample at the given index.
        /// </summary>
        /// <param name="index">Sample index from the sound source to return.</param>
        /// <returns>Sample at the given index.</returns>
        public virtual float GetSampleAt(float index)
        {
            return 0;
        }

        /// <summary>
        /// Fills the provided buffer with samples generated by this sound source.
        /// </summary>
        /// <param name="buffer">Float array representing the audio buffer to be filled.</param>
        /// <param name="channels">Number of output channels the buffer should provide for.</param>
        /// <param name="gain">Gain to apply to the output samples.</param>
        public void FillBuffer(ref float[] buffer, int channels, float gain = 1f)
        {
            for (var i = 0; i < buffer.Length; i += channels)
            {
                float sample = GetNextSample() * gain;

                for (var j = 0; j < channels; j++)
                    buffer[i + j] = sample;
            }
        }
    }
}